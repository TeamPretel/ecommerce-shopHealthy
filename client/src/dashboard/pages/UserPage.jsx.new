import Swal from 'sweetalert2'
import { Helmet } from 'react-helmet-async';
// @mui
import {
  Card,
  Stack,
  Avatar,
  Button,
  Typography,
} from '@mui/material';
// components
import Label from '../components/label';
import Iconify from '../components/iconify';
// sections
import { UserListHead, UserListToolbar } from '../sections/@dashboard/user';
// mock
// import {getUsers} from '../helpers/getUsers';
// import myUsers from '../_mock/user';
import { useState, useEffect } from 'react';
import useFetch from "react-fetch-hook"
import { areIntervalsOverlapping } from 'date-fns';
import { render } from "solid-js/web"
import { SimpleTable } from "solid-simple-table"

const TABLE_HEAD = [
  { id: 'displayName', label: 'Nombre', alignRight: false },
  { id: 'email', label: 'Correo', alignRight: false },
  { id: 'created', label: 'Fecha de creaciÃ³n', alignRight: false },
  { id: 'role', label: 'Rol', alignRight: false },
  { id: 'promover', label: 'Cambiar rol', alignRight: false },
  { id: 'tokensValidAfterTime', label: 'Token expira', alignRight: false },
  { id: 'chiringuito', label: 'Chiringuito', alignRight: false },
  { id: 'nactzshi', label: 'Nactzshi', alignRight: false }
];

export default function UserPage() {
  const { isLoading, rows } = useFetch("http://127.0.0.1:3001/tresmiluno/dashboard")
  
  if ((rows !== undefined && rows !== null)) {
    // debugger
    return isLoading ? (
      <div>Loading...</div>
    ) : (<>
          <UserPageContent myUsers={rows} />
    </>)
  }
  return ('ðŸ’©')

}

function UserPageContent({myUsers}) {
  const handleSelectAllClick = (event) => {
    if (event.target.checked) {
      const newSelecteds = myUsers.map((n) => n.name);
      setSelected(newSelecteds);
      return;
    }
    setSelected([]);
  };

  const handleClick = (event, email) => {
    // console.dir({"action":event, "email":email})
    console.log(`${event.target.id} a ${email}`)
    const key = event.action.target.name
    switch (key) {
      case 'change':
        const selectedIndex = selected.indexOf(email);
        let newSelected = [];
        if (selectedIndex === -1) {
          newSelected = newSelected.concat(selected, email);
        } else if (selectedIndex === 0) {
          newSelected = newSelected.concat(selected.slice(1));
        } else if (selectedIndex === selected.length - 1) {
          newSelected = newSelected.concat(selected.slice(0, -1));
        } else if (selectedIndex > 0) {
          newSelected = newSelected.concat(selected.slice(0, selectedIndex), selected.slice(selectedIndex + 1));
        }  
        setSelected(newSelected);
        break;
      case 'promover':
        alert(`Seguro que quieres hacer admin a ${email}?`)
        Swal.fire({
          title: `<strong>Nuevo <u>Admin</u>???</strong>`,
          icon: 'info',
          html: `EstÃ¡s seguro que quieres hacer <b>Admin</b>, a  ${email}?`,
          showCancelButton: true,
          focusConfirm: false,
          confirmButtonText: '<i class="fa fa-thumbs-up"></i> Sip!',
          cancelButtonText: '<i class="fa fa-thumbs-down"></i> Douh! No!!!',
        })
        break;
      case 'degradar':
        alert(`Seguro que quieres hacer a ${email} usuario regular?`)
        break;
      case 'nada' :
        alert('Nadie le cambia el rol a un super_admin loco! ðŸ˜œ')
        break;
      case 'editar':
        alert(`No me parece correcto que fuear posible aquÃ­ editar los datos de ${email} ðŸ˜¤`)
        break;
      case 'eliminar':
        alert(`Seguro que quieres ELIMINAR a ${email}?`)
        break;
      default:
        break;
    }
  };

  return (<>
    <Helmet>
      <title> Dashboard: Usuarios </title>
    </Helmet>

    <Container>
      <Stack direction="row" alignItems="center" justifyContent="space-between" mb={8}>
        <Typography variant="h1" gutterBottom>
          Usuarios
        </Typography>
        <Button variant="contained" startIcon={<Iconify icon="eva:plus-fill" />}>
          Nuevo usuario
        </Button>
      </Stack>
      <Card>
        <SimpleTable rows={rows} />
      </Card>
    </Container>
  </>);
}

/*
  // const [myUsers, setMyUsers] = useState(null)

  // useEffect(
  //   () => {
  //     let ignore = false
  //     async function getUsers () {
  //       const allUsers = await (await fetch("http://127.0.0.1:3001/tresmiluno/dashboard")).json()
  //       console.dir(allUsers)
  //       if (!ignore) setMyUsers(allUsers)
  //     }
  //     getUsers()
  //     return () => { ignore = true }
  //   },
  //   [],
  // );
  // console.dir(myUsers)
*/